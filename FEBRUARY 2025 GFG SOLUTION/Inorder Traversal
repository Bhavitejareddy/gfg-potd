Inorder Traversal
Given a Binary Tree, your task is to return its In-Order Traversal.

An inorder traversal first visits the left child (including its entire subtree), then visits the node, 
and finally visits the right child (including its entire subtree).

Follow Up: Try solving this with O(1) auxiliary space.

Code:

class Solution {
    // Function to return a list containing the inorder traversal of the tree.
    ArrayList<Integer> inOrder(Node root) {
        ArrayList<Integer> ans = new ArrayList();
        solve(root,ans);
        return ans;
    }
    void solve(Node root,ArrayList<Integer> ans){
        if(root==null){
            return;
        }
            solve(root.left,ans);
            ans.add(root.data);
            solve(root.right,ans);
        
    }
}
