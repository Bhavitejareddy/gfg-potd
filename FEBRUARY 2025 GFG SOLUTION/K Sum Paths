K Sum Paths
Given a binary tree and an integer k, determine the number of downward-only paths where the sum of the node values in the path equals k. 
A path can start and end at any node within the tree but must always move downward (from parent to child).

Code:

class Solution {
    public int sumK(Node root, int k) {
        HashMap<Integer,Integer> prefixSum = new HashMap<>();
        prefixSum.put(0,1);
        return dfs(root,0,k,prefixSum);
    }
    private int dfs(Node node,int currentSum,int k,HashMap<Integer,Integer> prefixSum){
        if(node == null) return 0;
        currentSum += node.data;
        int count = prefixSum.getOrDefault(currentSum-k,0);
        prefixSum.put(currentSum, prefixSum.getOrDefault(currentSum,0)+1);
        count += dfs(node.left,currentSum,k,prefixSum);
        count += dfs(node.right, currentSum,k,prefixSum);
        prefixSum.put(currentSum, prefixSum.get(currentSum)-1);
        return count;
    }
