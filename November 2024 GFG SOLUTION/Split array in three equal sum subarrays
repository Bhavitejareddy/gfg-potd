Split array in three equal sum subarrays
Given an array, arr[], determine if arr can be split into three consecutive parts such that the sum of each part is equal. 
If possible, return any index pair(i, j) in an array such that sum(arr[0..i]) = sum(arr[i+1..j]) = sum(arr[j+1..n-1]), 
otherwise return an array {-1,-1}.

Note: Since multiple answers are possible, return any of them. The driver code will print true if it is correct otherwise, it will print false.

Code:
class Solution {

     public List<Integer> findSplit(int[] arr) {
        // code here
        int n = arr.length,sum=0;
        List<Integer> ans = new ArrayList<>();
        for(int x:arr)sum+=x;
        if(sum%3!=0){
            ans.add(-1);
            ans.add(-1);
            return ans;
        }
        int requiredSum=sum/3;
        sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==requiredSum){
                ans.add(i);
                if(ans.size()==2)break;
                sum=0;
            }
        }
        if(ans.size()==2)return ans;
        ans.clear();
        ans.add(-1);
        ans.add(-1);
        return ans;
    }
}

Time Complexity:- O(N)
Space Complexity:- O(1)
