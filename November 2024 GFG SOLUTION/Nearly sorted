Nearly sorted
Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: You need to change the given array arr[] in place.


Code:

class Solution {
    public void nearlySorted(int[] arr, int k) {
        // Initialize a min-heap to keep track of the nearest k elements
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Add the first k+1 elements to the heap
        for (int i = 0; i <= k && i < arr.length; i++) {
            minHeap.add(arr[i]);
        }
        
        int index = 0; // To keep track of the sorted position in arr
        
        // Iterate through the rest of the elements
        for (int i = k + 1; i < arr.length; i++) {
            // Extract the minimum element from the heap and place it in arr
            arr[index++] = minHeap.poll();
            // Add the next element in the array to the heap
            minHeap.add(arr[i]);
        }
        
        // Place remaining elements from the heap into arr
        while (!minHeap.isEmpty()) {
            arr[index++] = minHeap.poll();
        }
    }
}
