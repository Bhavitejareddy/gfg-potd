Articulation Point - II

You are given an undirected graph with V vertices and E edges. The graph is represented as a 2D array edges[][], where each element edges[i] = [u, v] indicates an undirected edge between vertices u and v.
Your task is to return all the articulation points (or cut vertices) in the graph.
An articulation point is a vertex whose removal, along with all its connected edges, increases the number of connected components in the graph.

Note: The graph may be disconnected, i.e., it may consist of more than one connected component.
If no such point exists, return {-1}.

Code:

class Solution {
    
    static int timer;
    
    static void dfs(int u,int parent,boolean[] visited,int[] tin,int[] low,ArrayList<ArrayList<Integer>> adj, boolean[] isArticulation){
        visited[u] = true;
        tin[u] = low[u] = timer++;
        int children =0;
        for(int v:adj.get(u)){
            if(v== parent) continue;
            if(!visited[v]){
                dfs(v,u,visited,tin,low,adj,isArticulation);
                low[u] = Math.min(low[u],low[v]);
                if(low[v] >= tin[u] && parent != -1){
                    isArticulation[u] = true;
                }
                children++;
            }else{
                low[u] = Math.min(low[u],tin[v]);
            }
        }
        if(parent == -1 && children > 1){
            isArticulation[u] = true;
        }
    }
    static ArrayList<Integer> articulationPoints(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++) adj.add(new ArrayList<>());
        for(int[] edge : edges){
            int u = edge[0], v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean[] visited = new boolean[V];
        int[] tin = new int[V];
        int[] low = new int[V];
        boolean[] isArticulation = new boolean[V];
        timer = 0;
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,-1,visited,tin,low,adj,isArticulation);
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0;i<V;i++){
            if(isArticulation[i]){
                res.add(i);
            }
        }
        if(res.isEmpty()) res.add(-1);
        return res;
    }
}
