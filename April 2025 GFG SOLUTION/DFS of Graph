DFS of Graph
Given a connected undirected graph represented by a 2-d adjacency list adj[][], where each adj[i] represents the list of vertices connected to vertex i.
Perform a Depth First Search (DFS) traversal starting from vertex 0, visiting vertices from left to right as per the given adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

Code:
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> res = new ArrayList<>();
        boolean[] visited = new boolean[adj.size()];
        dfshelper(0,adj,visited,res);
        return res;
    }
    private void dfshelper(int node,ArrayList<ArrayList<Integer>> adj, boolean[] visited,ArrayList<Integer> res){
        visited[node] = true;
        res.add(node);
        for(int nei : adj.get(node)){
            if(!visited[nei]){
                dfshelper(nei,adj,visited,res);
            }
        }
    }
}
