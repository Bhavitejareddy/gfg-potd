Indexes of Subarray Sum
Given an array arr[] containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray. You need to find the first subarray whose sum is equal to the target.

Note: If no such array is possible then, return [-1].
Code:

class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = arr.length;
        int currentSum = 0;
        int start = 0;

        for (int end = 0; end < n; end++) {
            // Add the current element to the sum
            currentSum += arr[end];

            // Shrink the window from the left if the sum exceeds the target
            while (currentSum > target && start <= end) {
                currentSum -= arr[start];
                start++;
            }

            // Check if the current window matches the target sum
            if (currentSum == target) {
                result.add(start + 1); // 1-based index of the start
                result.add(end + 1);   // 1-based index of the end
                return result;
            }
        }

        // If no subarray is found, return [-1]
        result.add(-1);
        return result;
    }
}
