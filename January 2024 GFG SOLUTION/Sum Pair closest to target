Sum Pair closest to target
Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. 
If no such pair exists return an empty array.

Code:

class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
        // Sort the array
        Arrays.sort(arr);
        
        // Initialize variables
        int n = arr.length;
        int closestSum = Integer.MAX_VALUE;
        int maxAbsDiff = Integer.MIN_VALUE;
        List<Integer> result = new ArrayList<>();
        
        int left = 0, right = n - 1;
        
        // Two-pointer approach
        while (left < right) {
            int sum = arr[left] + arr[right];
            int absDiff = arr[right] - arr[left]; // Absolute difference
            
            // Update the closest sum and result pair
            if (Math.abs(target - sum) < Math.abs(target - closestSum) || 
               (Math.abs(target - sum) == Math.abs(target - closestSum) && absDiff > maxAbsDiff)) {
                closestSum = sum;
                maxAbsDiff = absDiff;
                result = Arrays.asList(arr[left], arr[right]);
            }
            
            // Move pointers
            if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
        
        return result;
    }
}
