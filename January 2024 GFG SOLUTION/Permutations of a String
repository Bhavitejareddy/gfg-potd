Permutations of a String
Given a string s, which may contain duplicate characters, your task is to generate and return an array of all unique permutations of the string.
You can return your answer in any order.

Code:
class Solution {
    public ArrayList<String> findPermutation(String s) {
        Set<String> ans = new HashSet<String>();
        boolean[] visit = new boolean[s.length()];
        makePermutation(s,ans,"",visit);
        return new ArrayList(ans);
    }
    static void makePermutation(String s,Set<String> ans,String curr,boolean[] visit){
        if(s.length() == curr.length()){
            ans.add(curr);
            return ;
        }
        for(int i=0;i<s.length();i++){
            if(!visit[i]){
                visit[i] = true;
                makePermutation(s,ans,curr+s.charAt(i),visit);
                visit[i] = false;
            }
        }
    }
}
