Allocate Minimum Pages
You are given an array arr[] of integers, where each element arr[i] represents the number of pages in the ith book. 
You also have an integer k representing the number of students. The task is to allocate books to each student such that:

Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.
The objective is to minimize the maximum number of pages assigned to any student.
In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

Code:

class Solution {
    public static int findPages(int[] arr, int k) {
        int n = arr.length;

        // If the number of students is greater than the number of books, allocation is not possible
        if (k > n) return -1;

        // Define the search space
        int low = getMax(arr); // Minimum possible value
        int high = getSum(arr); // Maximum possible value
        int result = -1;

        // Binary search to find the optimal solution
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (isFeasible(arr, n, k, mid)) {
                result = mid; // Update result with the feasible maximum pages
                high = mid - 1; // Try for a smaller maximum
            } else {
                low = mid + 1; // Try for a larger maximum
            }
        }

        return result;
    }

    // Helper function to find the maximum element in the array
    private static int getMax(int[] arr) {
        int max = Integer.MIN_VALUE;
        for (int num : arr) {
            max = Math.max(max, num);
        }
        return max;
    }

    // Helper function to find the sum of elements in the array
    private static int getSum(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }

    // Function to check if it's feasible to allocate books with the given maximum pages
    private static boolean isFeasible(int[] arr, int n, int k, int maxPages) {
        int studentCount = 1; // Start with the first student
        int currentSum = 0;

        for (int i = 0; i < n; i++) {
            // If a single book has more pages than maxPages, allocation is impossible
            if (arr[i] > maxPages) {
                return false;
            }

            // Add pages to the current student's allocation
            if (currentSum + arr[i] > maxPages) {
                // Assign books to the next student
                studentCount++;
                currentSum = arr[i];

                // If the number of students exceeds k, return false
                if (studentCount > k) {
                    return false;
                }
            } else {
                currentSum += arr[i];
            }
        }

        return true;
    }
}
