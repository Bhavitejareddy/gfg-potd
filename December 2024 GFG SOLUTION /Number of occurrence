Number of occurrence
Given a sorted array, arr[] and a number target, you need to find the number of occurrences of target in arr[]. 

Code:
class Solution {
    int countFreq(int[] arr, int target) {
        int n = arr.length;

        // Find the leftmost occurrence of target
        int left = findFirstOccurrence(arr, target, n);
        if (left == -1) {
            // If the target is not found, return 0
            return 0;
        }

        // Find the rightmost occurrence of target
        int right = findLastOccurrence(arr, target, n);

        // The number of occurrences is the difference of indices + 1
        return right - left + 1;
    }

    // Helper function to find the first occurrence of target
    private int findFirstOccurrence(int[] arr, int target, int n) {
        int low = 0, high = n - 1;
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                result = mid;
                high = mid - 1; // Move left to find earlier occurrence
            } else if (arr[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return result;
    }

    // Helper function to find the last occurrence of target
    private int findLastOccurrence(int[] arr, int target, int n) {
        int low = 0, high = n - 1;
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                result = mid;
                low = mid + 1; // Move right to find later occurrence
            } else if (arr[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return result;
    }
}
