Search Pattern (KMP-Algorithm)
Given two strings, one is a text string txt and the other is a pattern string pat.
The task is to print the indexes of all the occurrences of the pattern string in the text string. 
Use 0-based indexing while returning the indices. 
Note: Return an empty list in case of no occurrences of pattern.

Code:

class Solution {

    // Function to perform KMP search
    ArrayList<Integer> search(String pat, String txt) {
        // Create a list to store the starting indices of matches
        ArrayList<Integer> result = new ArrayList<>();

        // Compute the LPS (Longest Prefix Suffix) array for the pattern
        int[] lps = computeLPSArray(pat);

        // Initialize pointers for text and pattern
        int i = 0; // Index for txt
        int j = 0; // Index for pat

        // Traverse the text
        while (i < txt.length()) {
            if (txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }

            if (j == pat.length()) {
                // Found a match, add the start index to the result
                result.add(i - j);
                // Reset j using the LPS array
                j = lps[j - 1];
            } else if (i < txt.length() && txt.charAt(i) != pat.charAt(j)) {
                // Mismatch after j matches
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return result;
    }

    // Helper function to compute the LPS array
    private int[] computeLPSArray(String pat) {
        int m = pat.length();
        int[] lps = new int[m];

        int len = 0; // Length of the previous longest prefix suffix
        int i = 1;

        // Compute the LPS array
        while (i < m) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
}
